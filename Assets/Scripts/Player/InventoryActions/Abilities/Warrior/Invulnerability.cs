using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Invulnerability : PlayerInventoryAction
{
    public ArmorInfo armorInfo;

    [Space]

    public float refreshPeriod = 0.1f;
    public int strengthPerSecond = 30;

    private int strengthPerRefresh;

    private PlayerStats playerStats;

    [SerializeField] private bool isUsing = false;

    private void Awake()
    {
        playerStats = FindObjectOfType<PlayerStats>();

        if (playerStats.affinity.Equals(affinity))
            strengthPerSecond /= 2;
        strengthPerRefresh = Mathf.CeilToInt(refreshPeriod * strengthPerSecond);
    }

    public override void Use()
    {
        base.Use();

        if (isUsing)
        {
            DisableInvulnerability();
        }
        else
        {
            if (playerStats.strength >= strengthPerRefresh)
            {
                isUsing = true;
                StartCoroutine(RefreshArmor());
            }
        }
    }

    private IEnumerator RefreshArmor()
    {
        playerStats.EquipArmor(armorInfo);
        playerStats.ChangeStrength(-strengthPerRefresh);

        if (playerStats.strength >= strengthPerRefresh && isUsing)
        {
            yield return new WaitForSeconds(refreshPeriod);
            StartCoroutine(RefreshArmor());
        }
        else
        {
            DisableInvulnerability();
        }
    }

    private void DisableInvulnerability()
    {
        playerStats.UnequipArmor();
        StopCoroutine(RefreshArmor());

        isUsing = false;
    }
}
